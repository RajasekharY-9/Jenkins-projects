package com.infymemobileuser.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.apache.juli.logging.Log;
import org.apache.juli.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import com.infymemobileuser.dto.LoginDTO;
import com.infymemobileuser.dto.UserDTO;
import com.infymemobileuser.entity.Login;
import com.infymemobileuser.entity.UserEntity;
import com.infymemobileuser.repository.LoginRepository;
import com.infymemobileuser.repository.UserRepository;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private LoginRepository loginRepository;

	public static final Log LOGGER = LogFactory.getLog(UserService.class);

	@Override
	public String createUser(UserDTO userDTO) throws InfyMeMobileException {
		// TODO Auto-generated method stub

		UserEntity user = new UserEntity();
		user.setAccountHolderName(userDTO.getAccountHolderName());
		user.setCommunicationAddress(userDTO.getCommunicationAddress());
		user.setDateOfBirth(userDTO.getDateOfBirth());
		user.setEmail(userDTO.getEmail());
		user.setGender(userDTO.getGender());
		user.setMobileNumber(userDTO.getMobileNumber());
		user.setPAN(userDTO.getPAN());
		user.setPassword(userDTO.getPassword());
		user.setUserId(userDTO.getUserId());
		Optional<UserEntity> u2 = userRepository.findById(userDTO.getMobileNumber());
		if (u2.isEmpty()) {
			throw new InfyMeMobileException("User is Present");
		}

		UserEntity u = userRepository.save(user);

		return "" + u.getMobileNumber();
	}

	@Override
	public boolean loginUser(LoginDTO loginDTO) throws InfyMeMobileException {
		// TODO Auto-generated method stub
		Optional<Login> lg = loginRepository.findById(loginDTO.getMobileNumber());
		System.out.println(lg);
		if (lg.isPresent()) {

			loginDTO.getPassword().equals(lg.get().getPassword());
			return true;

		} else {
			throw new InfyMeMobileException("AUTHENTICATION_FAILED");
		}
	}

	@Override
	public UserDTO getUserProfile(String userId) throws InfyMeMobileException {

		Optional<UserEntity> os = userRepository.findById(userId);
		if (os.isPresent()) {
			UserDTO us = new UserDTO();
			us.setUserId(userId);
		} else {
			throw new InfyMeMobileException("USERID_NOT_FOUND");
		}

		return null;
	}

	@Override
	public List<UserDTO> showAllUsers() throws InfyMeMobileException {

		Iterable<UserEntity> ue = userRepository.findAll();

		List<UserDTO> list = new ArrayList<>();
		ue.forEach(c -> {
			UserDTO c2 = new UserDTO();
			c2.setAccountHolderName(c.getAccountHolderName());
			c2.setCommunicationAddress(c.getCommunicationAddress());
			c2.setDateOfBirth(c.getDateOfBirth());
			c2.setEmail(c.getEmail());
			c2.setGender(c.getGender());
			c2.setMobileNumber(c.getMobileNumber());
			c2.setPAN(c.getPAN());
			c2.setPassword(c.getPassword());
			c2.setUserId(c.getUserId());
		});
		if (list.isEmpty()) {
			throw new InfyMeMobileException("NO_USERS_FOUND");
		}

		return list;
	}

}
