package com.cab.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cab.dto.EmployeeDTO;
import com.cab.entity.Employee;
import com.cab.exception.EmployeeException;
import com.cab.repo.EmployeeRepository;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	private EmployeeRepository employeeRepository;

	@Override
	public EmployeeDTO getEmployee(Integer id) throws EmployeeException {

		Optional<Employee> isExist = employeeRepository.findById(id);

		Employee employee = isExist.orElseThrow(() -> new EmployeeException("SEVICE_EMP_NOT_EXISTS"));

		EmployeeDTO emp = new EmployeeDTO();

		emp.setId(employee.getId());
		emp.setName(employee.getName());
		emp.setPhoneNo(employee.getPhoneNo());
		emp.setCompany(employee.getCompany());
		emp.setSalary(employee.getSalary());

		return emp;
	}

	@Override
	public List<EmployeeDTO> getAllEmployees() throws EmployeeException {

		Iterable<Employee> employees = employeeRepository.findAll();

		List<EmployeeDTO> list = new ArrayList<>();

		employees.forEach(emp -> {

			EmployeeDTO employee = new EmployeeDTO();

			employee.setId(emp.getId());
			employee.setName(emp.getName());
			employee.setPhoneNo(emp.getPhoneNo());
			employee.setCompany(emp.getCompany());
			employee.setSalary(emp.getSalary());

			list.add(employee);
		});
		if (list.isEmpty()) {
			throw new EmployeeException("SEVICE_NO_EMPS_FOUND");
		}

		return list;
	}

	@Override
	public Integer addEmployee(EmployeeDTO empdto) throws EmployeeException {

		Optional<Employee> isExist = employeeRepository.findById(empdto.getId());
		Employee emp = isExist.orElseThrow(() -> new EmployeeException("SEVICE_ALREADY_EXISTS"));
		// Employee entity=new Employee();
		emp.setId(empdto.getId());
		emp.setName(empdto.getName());
		emp.setCompany(empdto.getCompany());
		emp.setPhoneNo(empdto.getPhoneNo());
		emp.setSalary(empdto.getSalary());
		employeeRepository.save(emp);
		return emp.getId();

	}

	@Override
	public void deleteEmployee(Integer id) throws EmployeeException {

		Optional<Employee> isExist = employeeRepository.findById(id);

		isExist.orElseThrow(() -> new EmployeeException("NOT_PRESENT"));

		employeeRepository.deleteById(id);

	}

	@Override
	public EmployeeDTO getByName(String name) throws EmployeeException {

		Optional<Employee> emp = employeeRepository.findByName(name);



		return emp;
	}

	@Override
	public EmployeeDTO getByPhoneNumber(Long phoneNo) throws EmployeeException {

		Optional<Employee> emp = Optional.of(employeeRepository.findByPhoneNo(phoneNo));

		Employee emps = emp.orElseThrow(() -> new EmployeeException("NOT_PRESENT"));

		return emps;
	}

	@Override
	public Employee getEmployee2(Integer id) throws EmployeeException {

		Optional<Employee> isExist = employeeRepository.findById(id);

		Employee employee = isExist.orElseThrow(() -> new EmployeeException("EMP_NOT_EXISTS"));

		EmployeeDTO emp = new EmployeeDTO();

		emp.setId(employee.getId());
		emp.setName(employee.getName());
		emp.setPhoneNo(employee.getPhoneNo());
		emp.setCompany(employee.getCompany());
		emp.setSalary(employee.getSalary());
		return employee;
	}

	@Override
	public void updateEmployee(Integer id, EmployeeDTO empdto) throws EmployeeException {

		Optional<Employee> emp = employeeRepository.findById(id);

		Employee emps = emp.orElseThrow(() -> new EmployeeException("EMP_NOT_EXISTS"));

		emps.setCompany(empdto.getCompany());
		emps.setName(empdto.getCompany());

		emps.setPhoneNo(empdto.getPhoneNo());
		emps.setSalary(empdto.getSalary());

	}

}
